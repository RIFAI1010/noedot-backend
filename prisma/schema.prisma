// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  email        String
  password     String?
  name         String
  avatar       String?
  provider     String? // 'local', 'google', 'facebook', etc
  providerId   String? // ID dari provider (Google ID, Facebook ID, dll)
  isVerified   Boolean   @default(false)
  lastResendAt DateTime?
  resetToken   String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  notes        Note[]
  noteedits    NoteEditAccess[]
  noteUserOpen NoteUserOpen[]

  RefreshToken RefreshToken[]
}

model RefreshToken {
  id           String   @id @default(uuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  refreshToken String
  deviceInfo   String?
  ipAddress    String?
  expiresAt    DateTime
  createdAt    DateTime @default(now())
}

// note
model Note {
  id        String     @id @default(uuid())
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  title     String
  status    NoteStatus @default(private)
  editable  Editable   @default(me)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  noteEdits  NoteEditAccess[]
  noteBlocks NoteBlock[]

  documents  Document[]
  Table      Table[]
  tableNotes TableNote[]

  PostGroup    PostGroup[]
  noteUserOpen NoteUserOpen[]
}

model NoteBlock {
  id          String    @id @default(uuid())
  noteId      String
  note        Note      @relation(fields: [noteId], references: [id], onDelete: Cascade)
  type        BlockType
  referenceId String?
  position    Int

  @@index([noteId, position, referenceId])
}

enum BlockType {
  document
  table
  postGroup
}

model NoteUserOpen {
  id     String   @id @default(uuid())
  openAt DateTime @default(now())
  note   Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)
  noteId String
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@index([openAt])
}

enum NoteStatus {
  public
  private
  access
}

enum Editable {
  me
  access
  everyone
}

model NoteEditAccess {
  id     String @id @default(uuid())
  note   Note   @relation(fields: [noteId], references: [id], onDelete: Cascade)
  noteId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

// end note

// document
model Document {
  id           String   @id @default(uuid())
  sourceNoteId String // digunakan untuk mengindikasikan document ini dibuat dari note mana
  note         Note     @relation(fields: [sourceNoteId], references: [id], onDelete: Cascade)
  name         String
  content      Json
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// end document
// table
model Table {
  id           String   @id @default(uuid())
  sourceNoteId String // digunakan untuk mengindikasikan table ini dibuat dari note mana
  note         Note     @relation(fields: [sourceNoteId], references: [id], onDelete: Cascade)
  name         String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  cols         Col[]
  rows         Row[]

  tableNotes TableNote[]
}

model TableNote {
  id      String @id @default(uuid())
  tableId String?
  table   Table? @relation(fields: [tableId], references: [id], onDelete: SetNull)
  noteId  String
  note    Note   @relation(fields: [noteId], references: [id], onDelete: Cascade)
}

model Col {
  id      String    @id @default(uuid())
  tableId String
  table   Table     @relation(fields: [tableId], references: [id], onDelete: Cascade)
  title   String?
  rowData RowData[]
}

model Row {
  id        String    @id @default(uuid())
  tableId   String
  table     Table     @relation(fields: [tableId], references: [id], onDelete: Cascade)
  rowNumber Int
  rowData   RowData[]
}

model RowData {
  id      String @id @default(uuid())
  rowId   String
  row     Row    @relation(fields: [rowId], references: [id], onDelete: Cascade)
  colId   String
  col     Col    @relation(fields: [colId], references: [id], onDelete: Cascade)
  content String?
}

// end table

// post
model PostGroup {
  id             String          @id @default(uuid())
  note           Note            @relation(fields: [sourceNoteId], references: [id], onDelete: Cascade)
  sourceNoteId   String
  name           String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  posts          Post[]
  postGroupPosts PostGroupPost[]
  ParentTag      ParentTag[]
}

model PostGroupPost {
  postGroupId String
  postId      String

  postGroup PostGroup @relation(fields: [postGroupId], references: [id], onDelete: Cascade)
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([postGroupId, postId])
}

model Post {
  id                String          @id @default(uuid())
  sourcePostGroupId String // digunakan untuk mengindikasikan post ini dibuat dari postgroup mana
  postGroup         PostGroup       @relation(fields: [sourcePostGroupId], references: [id], onDelete: Cascade)
  title             String
  content           String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  postGroupPosts    PostGroupPost[]
  postImages        PostImage[]
  PostTag           PostTag[]
}

model PostImage {
  id          String @id @default(uuid())
  postId      String
  post        Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  url         String
  imageNumber Int
}

// end post

// post tag
model ParentTag {
  id          String    @id @default(uuid())
  postGroupId String
  postGroup   PostGroup @relation(fields: [postGroupId], references: [id], onDelete: Cascade)
  name        String
  children    Tag[]
}

model Tag {
  id          String    @id @default(uuid())
  name        String
  parentTagId String
  parent      ParentTag @relation(fields: [parentTagId], references: [id], onDelete: Cascade)
  PostTag     PostTag[]
}

model PostTag {
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  tagId  String
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId])
}

// end post tag
